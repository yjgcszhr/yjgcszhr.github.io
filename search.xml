<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随笔</title>
      <link href="posts/a9a8.html"/>
      <url>posts/a9a8.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3cfa6f488a9852c70c93260707bfbc98f86a6a367ed4f570c11c738b7f348703">901b05b71b6ef9410c890050abab0ca53675009af90183757c1c8cd406448435a81865033556ecd4bf5218b6d1782603ff5b7dd18cdd5c4aa34f3728d3c3070bd98797c1c450a17b480092fdb3e7e877a1a584c888f19458b0ee6fbd50f4ac2588e94f7a3f08e01979df4d13c44aa933cd1d10704a410af38ab2f92f240d58a5e3ccb78c8444a07ccf96cc35493cf39b5d6fcd012db045c1b83e58e80765c3b2d131c3be48c4533dfad408cf87892374556ca967030335260fae07f1746d190f21699937cc91c2d6cfb5791642dac4188d2da774e6e9d72e77de37f06928b89c235ae84debdd6add8242f9b28ff6c5fae574d96dd3600ef6bb8d3571c4291bf9666ec0adf04ff48e5e05941afec2f93884b63fe38b01b9079b20964b23ea28e609a10cff7a66c3eb57d9730d1c9ec466b4b149893a8f0d5905ef40b0788dd442</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">亲，密码输入就可以看到内容了</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 水笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨时钟域问题解决</title>
      <link href="posts/1635.html"/>
      <url>posts/1635.html</url>
      
        <content type="html"><![CDATA[<p>当信号产生于一个时钟域，并穿过该时钟域边界，作用于另一时钟域时，称该信号为跨时钟信号，由<br>此引发的一系列问题称之为 CDC(clock domain crossing, 简称 CDC)问题。</p><h2 id="跨时钟域风险"><a href="#跨时钟域风险" class="headerlink" title="跨时钟域风险"></a>跨时钟域风险</h2><h3 id="1-亚稳态"><a href="#1-亚稳态" class="headerlink" title="1. 亚稳态"></a>1. 亚稳态</h3><blockquote><p>因为进入的数据未能满足触发器的建立时间和保持时间，触发器的输出在一段时间内无法保持一个确定的状态。如下图1所示，clkA和clkB为不同时钟，第一个触发器输出在DFF2的建立时间和保持时间内不断变化，导致DFF2的输出有误，上下动弹甚至出错，出现了亚稳态现象。图2所示为出现亚稳态时的时序图。<br><img src="/img/CDC/a1.png" alt="图1 跨时钟域电路"><br><img src="/img/CDC/a2.png" alt="图2 亚稳态时序图"></p></blockquote><h3 id="2-数据丢失"><a href="#2-数据丢失" class="headerlink" title="2. 数据丢失"></a>2. 数据丢失</h3><blockquote><p>当数据从快时钟域进入慢时钟域时，会出现慢时钟域没有采样到快时钟域的信号，从而出现数据丢失的情况，进而导致系统出现故障。如下图所示，快时钟域 clockA 输出脉冲信号 Q1 到慢时钟域 clockB，在右侧时序图中可以看到此时 clockB 时钟根本没有采样到该脉冲信号。<br><img src="/img/CDC/a4.png" alt="图3 数据丢失电路"><br><img src="/img/CDC/a5.png" alt="图4 电路时序图"></p></blockquote><h2 id="跨时钟域处理"><a href="#跨时钟域处理" class="headerlink" title="跨时钟域处理"></a>跨时钟域处理</h2><h3 id="1-两级同步"><a href="#1-两级同步" class="headerlink" title="1. 两级同步"></a>1. 两级同步</h3><blockquote><p>两级同步就是我们常说的“打两拍”，这可以有效降低亚稳态出现的概率。<strong>两级同步处理只适合单比特电路</strong>。<br>下图所示为两级同步原理图，图中 DB1 是第一个触发器的输出，Dout 是第二个触发器的输出。Dout<br>用来避免亚稳态信号传递到其他后续电路中，一旦同步后的信号有机会稳定下来，就会把信号传递出去。<br>两个触发器之间不加任何逻辑，可以为信号稳定争取足够的时间。<br><img src="/img/CDC/a6.png" alt="图5 两级同步电路"><br><img src="/img/CDC/a7.png" alt="图6 电路时序图"></p></blockquote><h3 id="2-信号展宽"><a href="#2-信号展宽" class="headerlink" title="2. 信号展宽"></a>2. 信号展宽</h3><blockquote><p>信号展宽主要是解决单比特信号<strong>从快时钟域跨越到慢时钟域</strong>时产生信号丢失风险。在快时钟域将跨时<br>钟域信号至少展宽成慢时钟域时钟周期的两倍，使得跨时钟域信号对于目的时钟域来说是一种电平信号。<br>如下图所示，左侧红色椭圆圈内是展宽逻辑，这里仅做示意，只展宽成发送时钟域的两个时钟周期。<br><img src="/img/CDC/a11.png" alt="图8 信号展宽电路图及时序图"></p></blockquote><h3 id="3-格雷码"><a href="#3-格雷码" class="headerlink" title="3. 格雷码"></a>3. 格雷码</h3><blockquote><p>格雷码的独特之处在于相邻两数变换的时候只有1个bit发生改变，通常用于异步fifo的地址传递。所以对于总线的数据，在跨时钟传递前应该进行格雷码转换，然后再传递出去。<br><img src="/img/CDC/a8.png" alt="图9 格雷码转换电路图"></p></blockquote><h3 id="4-握手电路"><a href="#4-握手电路" class="headerlink" title="4. 握手电路"></a>4. 握手电路</h3><blockquote><p><strong>note：仅适用于快时钟域向慢时钟域的数据传输</strong><br>握手电路的步骤是：</p></blockquote><ol><li>源时钟域向目的时钟域发送req信号和数据信号</li><li>目的时钟域接收到req和数据信号后，会回发一个ack信号</li><li>源时钟域接收到ack信号后会拉低req信号，整个数据交换完成<br><img src="/img/CDC/a9.png" alt="图10 握手电路原理图"></li></ol><p><strong>note: req信号和ack信号要在对方时钟域进行两级同步</strong><br><img src="/img/CDC/a10.png" alt="图11 握手电路时序图"></p><h3 id="5-异步fifo"><a href="#5-异步fifo" class="headerlink" title="5. 异步fifo"></a>5. 异步fifo</h3><blockquote><p>一般情况下，基本会采用异步fifo传递数据，不受任何限制。但是异步fifo非常消耗资源。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDC </tag>
            
            <tag> verilog </tag>
            
            <tag> IC设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>modelsim使用到的一些tcl脚本</title>
      <link href="posts/5e6f.html"/>
      <url>posts/5e6f.html</url>
      
        <content type="html"><![CDATA[<p>日常modelsim仿真，每次都需要建立工程，添加波形，很是麻烦，于是我就上网搜了一下，总结写了一点脚本来自动编译仿真代码文件。菜鸟学习中，写得不当，还请指正。</p><h2 id="常用指令简介"><a href="#常用指令简介" class="headerlink" title="常用指令简介"></a>常用指令简介</h2><blockquote><p>vlib work :创建名叫work的工作库<br>vmap work work : 映射逻辑库名work到指定的目录<br>vlog test.v :编译名叫test的verilog文件<br>vcom test.vhd :编译名叫test的vhdl文件<br>vsim -voptargs=+acc -L altera_mf test: 仿真test文件，-L表示使用altera库<br><code>add wave /*</code> : 将所有信号waveform dump出来<br>quit -sim : 停止仿真<br>run 10ms :运行10个ms</p></blockquote><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><blockquote><ol><li>创建一个名叫run的文本文档，将后缀名改为.bat<br>填写内容： </li></ol></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">#C:\modeltech64_10.5\win64\modelsim -do mrun.do#用modelsim仿真则注释下面,根据modelsim安装路径填写上面路径C:\questasim64_10.6c\win64\questasim -do mrun.do#用questasim仿真则注释上面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后关闭</p><blockquote><ol start="2"><li>创建一个名叫mrun的文本文档，将后缀名改为.do<br>填写内容;</li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">.main clear#清空命令行vlib workvmap work workvlog altera_mf.vvlog filelist.sv#大型工程中，文件众多，可以在filelist中include所有文件vsim -novopt -voptargs&#x3D;+acc work.dma_test_top#使用vopt进行设计优化，常与+acc配合使用#vsim用来仿真顶部模块，一般是tb文件，例如上面换成work.test_tbadd log -r &#x2F;*#添加日志，方便仿真中每次添加信号后能自动显示其值，不用重新rundo wave.dorun 10ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后关闭</p><blockquote><ol start="3"><li>创建一个名叫wave的文本文档，将后缀名改为.do<br>填写内容：</li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">add wave –hex &#x2F;top&#x2F;clk#根据信号引脚填写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为什么要另创建一个wave文件，而不是直接写在mrun.do里，是方便在波形展示界面添加需要查看的信号后可以点击保存信号列表文件，然后覆盖wave文件<br><img src= "/img/modelsim/wave.png" width= "100%"></p><blockquote><ol start="4"><li>filelist文件编写</li></ol></blockquote><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">&#96;include  &quot;.&#x2F;..&#x2F;env&#x2F;ram&#x2F;ram_400_128.v&quot; &#x2F;&#x2F;路径要使用相对路径，本工作目录是和work文件夹在同一目录&#96;include  &quot;.&#x2F;..&#x2F;env&#x2F;ram&#x2F;ram_400_128_add_csn.v&quot;&#x2F;&#x2F; .&#x2F;表示在同一路径   ..&#x2F;表示返回上一目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modelsim </tag>
            
            <tag> tcl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcl快速入门</title>
      <link href="posts/cb9b.html"/>
      <url>posts/cb9b.html</url>
      
        <content type="html"><![CDATA[<p>TCL是一种很通用的脚本语言，功能强大。最早称为“工具命令语言””Tool Command Language”，但是目前已经不是这个含义，不过我们仍然称呼它TCL，发音为”tickle”。TCL经常被用于快速原型开发，脚本编程，GUI和测试等方面。</p><h2 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h2><blockquote><p>TCL语言使用<code>$ [] \</code>来实现置换功能<br>$: 解释器会把$后面的认为是变量名，将变量置换成他的值，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">set a &quot;zhr&quot;; #赋值给aputs $a;#打印结果为zhrputs a;#打印结果为a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>[ ]</code>:[ ]内是一个独立的TCL语句，例：</p><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">set a [expr 3 + 4];puts $a;#打印结果是7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>\</code>: 加上\会变成普通字符,例：</p><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">puts &quot;[expr 3 + 4]&quot;;#结果是7，expr是将运算表达式求值puts &quot;\[[expr 3 + 4]]&quot;;#输出结果是[expr 3 + 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其他字符： { }相当于\ 的功能     #起到注释的作用,此处就不举例说明了</p></blockquote><h2 id="变量数组列表"><a href="#变量数组列表" class="headerlink" title="变量数组列表"></a>变量数组列表</h2><blockquote><p>变量定义 set 变量名 变量值，取值 puts $变量名，例：<br><code>set a &quot;i love you&quot;</code><br><code>puts $a</code></p></blockquote><blockquote><p>数组定义 set 数组名（元素名）值，取值 puts $数组名（元素名），例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">set cell(name) &quot;zhr&quot;;puts $cell(name)；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用array获取数组信息，例：<br><code>array size cell</code>或者<code>array name cell</code></p><blockquote><p>列表定义 set 列表名 {元素1 元素2}，取值 puts $列表名，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">set list &#123;list1 list2 list3&#125;;puts $list;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本人觉得列表和变量的使用方法相同</p><h2 id="列表指令"><a href="#列表指令" class="headerlink" title="列表指令"></a>列表指令</h2><blockquote><p>contact: 合并两列表，例： </p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">contact $list1 $list2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>llength: 返回元素个数，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">llength $list1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>lindex: 返回列表第n个元素，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">lindex $list1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>lappend: 末尾加入新元素，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">lappend list1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>lsort: 排序，后面可加参数 -real 按浮点数大小排  -unique 删除重复，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">lsort (real) $list1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><blockquote><p>if语句：和c语言中的if语句功能十分相似，例</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">if &#123; 表达式 &#125; &#123;            #运算;        &#125; else &#123;             #其他运算;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>foreach语句：把列表里第0个元素开始，依次把值赋给变量，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">foreach i $list&#123;  # 把list里的元素依次给iputs $i&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>break语句</p></blockquote><img src="/img/tcl/break.jpg" width = "100%"><blockquote><p>continue语句<br><img src="/img/tcl/continue.png" width = "100%"></p></blockquote><blockquote><p>while语句<br><img src="/img/tcl/while.png" width = "100%"></p></blockquote><blockquote><p>for语句结构：for{initialization} {condition} {increment} {body}，例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">for &#123;set i 0&#125; &#123;$i&lt; 10&#125; &#123;incr i&#125; &#123;puts $i;&#125;  #将打印出0到9&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="过程函数"><a href="#过程函数" class="headerlink" title="过程函数"></a>过程函数</h2><img src="/img/tcl/proc.png" width = "100%"><h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><blockquote><p>正则表达式是按照字符匹配规则提取出自己需要的字符内容，字符匹配规则如下：<br>正则表达式的\w，是匹配一个字母、数字或下划线，<br>正则表达式的\d,是匹配数字，<br>正则表达式的\s，用来匹配空格，<br>正则表达式的<code>.</code>,用来匹配任一字符，<br>正则表达式的<code>*</code>用来进行零次或多次匹配，<code>+</code>用来一次或多次匹配，<code>?</code>用来零次或一次匹配，<br>正则表达式的<code>^</code>用来表示字符串开头，<code>$</code>表示字符串结尾。</p></blockquote><p>我们使用正则匹配指令regexp来进行正则匹配。例：</p><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">regexp &#123;\s(\d+).*&#125; &quot;snow is 30 years old&quot; total age puts $total#输出30 years oldputs $age#输出30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><blockquote><p>文本处理在日常生活中十分常用，tcl脚本中用于文本处理的一般是open,gets,close;例：</p></blockquote><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">set f01 [open &quot;fix.tcl&quot; w];# 命令表示 打开或者新建一个文件“fix.tcl”，并将其 file ID 设置为 f01，后续就以这个 file ID 来操作这个文件；puts  $f01 &quot;size_cell $cel_name $ref_name&quot; ;#这条命令表示将这个字符串写入文件 fix.tcl，并自动追加换行符；close $f01 ;#对文件操作完成后，需要将其关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="posts/b859.html"/>
      <url>posts/b859.html</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。笔者写这篇文章主要是写给自己看，熟能生巧，也顺便推广一波markdown。</p><span id="more"></span><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><blockquote><p>一个#表示一级标题，两个表示二级标题，最多可使用6个#，代码如下</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用<code>**加粗**</code>显示<br>使用<code>*斜体*</code>显示<br>使用<code>***加粗斜体***</code>显示<br>使用删除线<code>~~删除线~~</code>显示<br>展示效果如下：</p></blockquote><blockquote><p><strong>加粗</strong><br><em>斜体</em><br><em><strong>加粗斜体</strong></em><br><del>删除线</del></p></blockquote><h2 id="2-图片"><a href="#2-图片" class="headerlink" title="2.图片"></a>2.图片</h2><blockquote><p>代码格式：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">![alt 属性文本](图片地址)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例来说：</p><pre class="line-numbers language-none"><code class="language-none">![龙猫](https:&#x2F;&#x2F;image.baidu.com&#x2F;search&#x2F;detail)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果图片地址为本地，就是</p><pre class="line-numbers language-none"><code class="language-none">![龙猫](&#x2F;img&#x2F;markdown&#x2F;cat.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果展示：<br><img src="/img/markdown/cat.png" alt="龙猫"></p><blockquote><p>markdown不能改变图片大小，可以使用普通的 <code>&lt;img&gt;</code> 标签<code>&lt;img src=&quot;/img/markdown/cat.png&quot; width=&quot;50%&quot;&gt;</code><br>效果展示：</p></blockquote><img src="/img/markdown/cat.png" width="50%"><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><blockquote><p>一般可以选择在代码前使用 4 个空格或者一个制表符（Tab 键）。<br>又或者在代码上下一行使用```,<br>本人觉得第二种方便使用，前一种不知是不是我方法问题，无法奏效<br>例：</p></blockquote><pre class="line-numbers language-md" data-language="md"><code class="language-md">&#96;&#96;&#96;printf(&quot;i love you&quot;);&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>还有一种，段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">&#96;printf(&quot;i love you&quot;);&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h2><blockquote><p>代码格式：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[链接名称](链接地址)或者&lt;链接地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：<code>这是我的[博客地址](https://yjgcszhr.github.io/)</code></p><blockquote><p> 效果就是：<br>    这是我的<a href="https://yjgcszhr.github.io/">博客地址</a></p></blockquote><h2 id="5-区块和列表"><a href="#5-区块和列表" class="headerlink" title="5.区块和列表"></a>5.区块和列表</h2><blockquote><p>区块是在段落开头使用<code>&gt;</code>，并空一格<br> 列表使用<code>星号(*)、加号(+)或是减号(-)</code>作为列表标记，或者<code>数字并加上 . 号</code>表示 </p></blockquote><pre class="line-numbers language-none"><code class="language-none"> &gt; 区块中使用列表&gt; 1. 第一项&gt;&gt; 2. 第二项&gt; + 第一项&gt; - 第二项&gt; * 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果展示：</p><blockquote><p>区块中使用列表</p><ol><li>第一项<blockquote><ol start="2"><li>第二项</li></ol></blockquote></li></ol><ul><li>第一项</li></ul><ul><li>第二项</li></ul><ul><li>第三项</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/3eeb.html"/>
      <url>posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
